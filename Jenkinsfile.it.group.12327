/*
 *  Copyright (C) 2011-2021 Red Hat, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
def artifact_glob="build/*"
def build_image="quay.io/factory2/spmm-jenkins-agent-go-centos7:latest"

def builds 

def generate_stages( data ) {
    data.each { item -> 
        stage ( "${item.id}" )
        {
            def builds = item.build
            def buildJobs = [:]
            builds.each { BUILD_ID -> 
                def buildJob = {
                    catchError {
                        build(
                            job: "indy-integration-test",
                            parameters: [
                                string(name:"BUILD_ID", value: "${BUILD_ID}")
                            ]
                        )
                    }
                }
                buildJobs.put("${BUILD_ID}", buildJob)
            }
            parallel ( buildJobs )
        }
    }
} 

pipeline {
  agent {
    kubernetes {
      cloud params.JENKINS_AGENT_CLOUD_NAME
      label "jenkins-slave-${UUID.randomUUID().toString()}"
      serviceAccount "jenkins"
      defaultContainer 'jnlp'
      yaml """
      apiVersion: v1
      kind: Pod
      metadata:
        labels:
          app: "jenkins-${env.JOB_BASE_NAME}"
          indy-pipeline-build-number: "${env.BUILD_NUMBER}"
      spec:
        containers:
        - name: jnlp
          image: ${build_image}
          imagePullPolicy: Always
          tty: true
          env:
          - name: HOME
            value: /home/jenkins
          - name: GOROOT
            value: /usr/lib/golang
          - name: GOPATH
            value: /home/jenkins/gopath
          - name: GOPROXY
            value: https://proxy.golang.org
          resources:
            requests:
              memory: 4Gi
              cpu: 2000m
            limits:
              memory: 8Gi
              cpu: 4000m
          workingDir: /home/jenkins
      """
    }
  }
  stages {
    //stage ('init build queue data dir')
    //{
    //  steps {
    //    script {
    //      new File('/tmp/build-queue-data').mkdir()
    //    }
    //  }
    //}
    stage ('clone sources')
    {
      steps {
        //dir ('/tmp/build-queue-data')
        //{
        //  git url: 'https://github.com/Commonjava/indy-tests.git'
        //}
        checkout([$class      : 'GitSCM', branches: [[name: 'main']], doGenerateSubmoduleConfigurations: false,
                    extensions  : [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'build-data']], submoduleCfg: [],
                    userRemoteConfigs: [[url: 'https://github.com/Commonjava/indy-tests.git']]])
      }
    }
    
    stage ('read queue data')
    {
      steps {
        script {
          echo "${env.HOME}"
          echo "${env.JOB_BASE_NAME}"
          echo "${env.JOB_NAME}"
          builds = readYaml (file: '/home/jenkins/workspace/Commonjava-manual/indy-integration-test-wguo/build-data/build-queue.yaml')
        }
      }
    }
    stage ('generate stages')
    {
        steps {
            generate_stages(builds)
        }
    }
  }
}